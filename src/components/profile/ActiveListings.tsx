"use client";

import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Carousel, CarouselContent, CarouselItem } from "@/components/ui/carousel";
import { productsData, ProductData } from "@/data/products";
import { useProductImages } from "@/lib/hooks/useProductImages";
import { EditListingModal } from "@/components/profile/EditListingModal";
import { AddListingModal } from "../AddListingModal";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Edit, Eye, CheckCircle, XCircle, Package, Plus } from "lucide-react";
import Link from "next/link";
import Image from "next/image";

interface ActiveListingsProps {
  sellerName: string;
}

export function ActiveListings({ sellerName }: ActiveListingsProps) {
  const [activeListings, setActiveListings] = useState<ProductData[]>([]);
  const [soldListings, setSoldListings] = useState<Set<string>>(new Set());
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'active' | 'sold'>('active');
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingListing, setEditingListing] = useState<ProductData | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);

  useEffect(() => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É
      const userListings = Object.values(productsData).filter(
        product => product.seller?.name === sellerName
      );
      setActiveListings(userListings);
      setLoading(false);
    }, 500);
  }, [sellerName]);

  const handleEditListing = (listing: ProductData) => {
    setEditingListing(listing);
    setIsEditModalOpen(true);
  };

  const handleSaveListing = (updatedListing: ProductData) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    setActiveListings(prev => 
      prev.map(listing => 
        listing.id === updatedListing.id ? updatedListing : listing
      )
    );
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    console.log("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", updatedListing);
  };

  const handleCloseEditModal = () => {
    setIsEditModalOpen(false);
    setEditingListing(null);
  };

  const handleMarkAsSold = (listingId: string) => {
    setSoldListings(prev => new Set([...prev, listingId]));
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–¥–∞–Ω–æ"
    setActiveTab('sold');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    console.log("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ:", listingId);
  };

  const handleAddListing = (data: { title: string; description: string; price: number; category: string; condition: string; location: string; images: File[]; type: 'product' | 'service' }) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    console.log("–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:", data);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const newListing: ProductData = {
      id: Date.now().toString(),
      title: data.title,
      price: data.price,
      category: data.category,
      condition: data.condition as "new" | "excellent" | "good" | "fair",
      views: 0,
      publishedAt: new Date().toISOString(),
      description: data.description,
      seller: {
        name: sellerName,
        avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face",
        rating: 4.7,
        memberSince: "2022-03-15T00:00:00Z",
        totalSales: 23,
        responseTime: "–í —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤"
      }
    };
    
    setActiveListings(prev => [newListing, ...prev]);
  };

  if (loading) {
    return (
      <div className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
          <div>
            <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100">
              –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            </h2>
            <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏
            </p>
          </div>
          <div className="w-32 h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {[1, 2, 3, 4].map((i) => (
            <Card key={i} className="border border-slate-200 dark:border-slate-700 animate-pulse">
              <CardContent className="p-3 text-center">
                <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded mb-1"></div>
                <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="space-y-3">
          <div className="grid grid-cols-2 gap-1 h-10 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
          
          {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-3">
            {[1, 2, 3, 4].map((i) => (
              <Card key={i} className="border border-slate-200 dark:border-slate-700 animate-pulse">
                <CardContent className="p-0">
                  <div className="flex flex-col sm:flex-row">
                    <div className="w-full sm:w-32 h-32 sm:h-24 bg-gray-200 dark:bg-gray-700"></div>
                    <div className="flex-1 p-3 space-y-2">
                      <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                      <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                      <div className="flex gap-1">
                        <div className="h-7 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
                        <div className="h-7 bg-gray-200 dark:bg-gray-700 rounded w-20"></div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (activeListings.length === 0) {
    return (
      <div className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
          <div>
            <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100">
              –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            </h2>
            <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏
            </p>
          </div>
          <Button size="sm" onClick={() => setIsAddModalOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
          </Button>
        </div>

        <Card className="border border-slate-200 dark:border-slate-700">
          <CardContent className="p-8 text-center">
            <div className="space-y-4">
              <div className="text-6xl text-slate-300 dark:text-slate-600">üìù</div>
              <h3 className="text-lg font-medium text-slate-900 dark:text-slate-100">
                –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
              </h3>
              <p className="text-slate-600 dark:text-slate-400">
                –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å
              </p>
              <Button onClick={() => setIsAddModalOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
              </Button>
            </div>
          </CardContent>
        </Card>

        <AddListingModal
          isOpen={isAddModalOpen}
          onClose={() => setIsAddModalOpen(false)}
          onSubmit={handleAddListing}
        />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
        <div>
          <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100">
            –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
          </h2>
          <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏
          </p>
        </div>
        <Button size="sm" onClick={() => setIsAddModalOpen(true)}>
          <Plus className="h-4 w-4 mr-2" />
          –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        </Button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
        <Card className="border border-slate-200 dark:border-slate-700">
          <CardContent className="p-3 text-center">
            <div className="text-xl font-bold text-slate-900 dark:text-slate-100">
              {activeListings.filter(listing => !soldListings.has(listing.id)).length}
            </div>
            <div className="text-xs text-slate-600 dark:text-slate-400">
              –ê–∫—Ç–∏–≤–Ω—ã—Ö
            </div>
          </CardContent>
        </Card>
        <Card className="border border-slate-200 dark:border-slate-700">
          <CardContent className="p-3 text-center">
            <div className="text-xl font-bold text-slate-900 dark:text-slate-100">
              {soldListings.size}
            </div>
            <div className="text-xs text-slate-600 dark:text-slate-400">
              –ü—Ä–æ–¥–∞–Ω–æ
            </div>
          </CardContent>
        </Card>
        <Card className="border border-slate-200 dark:border-slate-700">
          <CardContent className="p-3 text-center">
            <div className="text-xl font-bold text-slate-900 dark:text-slate-100">
              {activeListings.reduce((sum, listing) => sum + listing.views, 0)}
            </div>
            <div className="text-xs text-slate-600 dark:text-slate-400">
              –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            </div>
          </CardContent>
        </Card>
        <Card className="border border-slate-200 dark:border-slate-700">
          <CardContent className="p-3 text-center">
            <div className="text-xl font-bold text-slate-900 dark:text-slate-100">
              {activeListings.reduce((sum, listing) => sum + listing.price, 0).toLocaleString('ru-RU')} ‚ÇΩ
            </div>
            <div className="text-xs text-slate-600 dark:text-slate-400">
              –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'active' | 'sold')}>
        <TabsList className="grid w-full grid-cols-2 h-10">
          <TabsTrigger value="active" className="text-sm">–ê–∫—Ç–∏–≤–Ω—ã–µ</TabsTrigger>
          <TabsTrigger value="sold" className="text-sm">–ü—Ä–æ–¥–∞–Ω–æ</TabsTrigger>
        </TabsList>

        <TabsContent value="active" className="space-y-3">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-3">
            {activeListings
              .filter(listing => !soldListings.has(listing.id))
              .map((listing) => (
                <ListingCard
                  key={listing.id}
                  listing={listing}
                  onEdit={handleEditListing}
                  onMarkAsSold={handleMarkAsSold}
                  isSold={false}
                />
              ))}
          </div>
          {activeListings.filter(listing => !soldListings.has(listing.id)).length === 0 && (
            <div className="text-center py-8">
              <div className="text-slate-500 dark:text-slate-400 mb-4">
                <Package className="h-12 w-12 mx-auto mb-4" />
                <p className="text-lg font-medium">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</p>
                <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å</p>
              </div>
              <Button onClick={() => setIsAddModalOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
              </Button>
            </div>
          )}
        </TabsContent>

        <TabsContent value="sold" className="space-y-3">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-3">
            {activeListings
              .filter(listing => soldListings.has(listing.id))
              .map((listing) => (
                <ListingCard
                  key={listing.id}
                  listing={listing}
                  onEdit={handleEditListing}
                  onMarkAsSold={handleMarkAsSold}
                  isSold={true}
                />
              ))}
          </div>
          {activeListings.filter(listing => soldListings.has(listing.id)).length === 0 && (
            <div className="text-center py-8">
              <div className="text-slate-500 dark:text-slate-400 mb-4">
                <CheckCircle className="h-12 w-12 mx-auto mb-4" />
                <p className="text-lg font-medium">–ù–µ—Ç –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>
                <p className="text-sm">–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</p>
              </div>
            </div>
          )}
        </TabsContent>
      </Tabs>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <EditListingModal
        isOpen={isEditModalOpen}
        onClose={handleCloseEditModal}
        listing={editingListing}
        onSave={handleSaveListing}
      />

      <AddListingModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        onSubmit={handleAddListing}
      />
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –¥–∏–∑–∞–π–Ω–æ–º –∫–∞–∫ ProductCard
function ListingCard({ 
  listing, 
  onEdit, 
  onMarkAsSold, 
  isSold 
}: { 
  listing: ProductData; 
  onEdit: (listing: ProductData) => void;
  onMarkAsSold: (listingId: string) => void;
  isSold: boolean;
}) {
  const { images, loading, error } = useProductImages({
    category: listing.category,
    productId: listing.id,
    count: 3
  });

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getConditionText = (condition: string) => {
    const conditions = {
      new: "–ù–æ–≤—ã–π",
      excellent: "–û—Ç–ª–∏—á–Ω–æ–µ",
      good: "–•–æ—Ä–æ—à–µ–µ",
      fair: "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
    };
    return conditions[condition as keyof typeof conditions] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU').format(price);
  };

  return (
    <Card className={`group hover:shadow-md transition-all duration-200 border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 overflow-hidden ${
      isSold ? "opacity-75" : ""
    }`}>
      <CardContent className="p-0">
        {/* Compact Layout */}
        <div className="flex flex-col sm:flex-row">
          {/* Image Section */}
          <div className="relative w-full sm:w-32 h-32 sm:h-24 flex-shrink-0">
            <Carousel 
              className="w-full h-full"
              opts={{
                align: "start",
                loop: true,
              }}
            >
              <CarouselContent>
                {loading ? (
                  <CarouselItem>
                    <div className="w-full h-full bg-gray-200 dark:bg-gray-700 animate-pulse" />
                  </CarouselItem>
                ) : error || !images || images.length === 0 ? (
                  <CarouselItem>
                    <div className="w-full h-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center">
                      <div className="text-gray-400 dark:text-gray-600 text-xs">–ù–µ—Ç —Ñ–æ—Ç–æ</div>
                    </div>
                  </CarouselItem>
                ) : (
                  images.map((image, index) => (
                    <CarouselItem key={index}>
                      <div className="w-full h-full overflow-hidden px-1 py-1">
                        <Image
                          src={image}
                          alt={`${listing.title} - —Ñ–æ—Ç–æ ${index + 1}`}
                          width={200}
                          height={200}
                          className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 rounded-md"
                        />
                      </div>
                    </CarouselItem>
                  ))
                )}
              </CarouselContent>
              {/* –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
            </Carousel>
            
            {/* Condition Badge */}
            <div className="absolute top-1 left-1 z-10">
              <Badge variant="secondary" className="text-xs bg-white/90 dark:bg-slate-900/90">
                {getConditionText(listing.condition)}
              </Badge>
            </div>
            
            {/* Sold Badge */}
            {isSold && (
              <div className="absolute top-1 right-1 z-10">
                <Badge variant="secondary" className="text-xs bg-green-500 text-white">
                  –ü—Ä–æ–¥–∞–Ω–æ
                </Badge>
              </div>
            )}
          </div>

          {/* Content Section */}
          <div className="flex-1 p-3 min-w-0">
            {/* Title and Price Row */}
            <div className="flex items-start justify-between mb-2">
              <h3 className="text-sm font-medium text-slate-900 dark:text-slate-100 line-clamp-2 leading-tight flex-1 mr-2">
                {listing.title}
              </h3>
              <span className="text-lg font-bold text-slate-900 dark:text-slate-100 flex-shrink-0">
                {formatPrice(listing.price)} ‚ÇΩ
              </span>
            </div>
            
            {/* Stats Row */}
            <div className="flex items-center justify-between text-xs text-slate-500 dark:text-slate-400 mb-2">
              <div className="flex items-center space-x-1">
                <Eye className="w-3 h-3" />
                <span>{listing.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
              </div>
              <div className="flex items-center space-x-1">
                <Package className="w-3 h-3" />
                <span>{formatDate(listing.publishedAt)}</span>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex flex-wrap gap-1">
              <Button variant="outline" size="sm" className="text-xs h-7 px-2" asChild>
                <Link href={`/product/${listing.id}`}>
                  <Eye className="h-3 w-3 mr-1" />
                  –ü—Ä–æ—Å–º–æ—Ç—Ä
                </Link>
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                className="text-xs h-7 px-2"
                onClick={() => onEdit(listing)}
              >
                <Edit className="h-3 w-3 mr-1" />
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                className={`text-xs h-7 px-2 ${
                  isSold 
                    ? "border-green-600 text-green-600 bg-green-50 dark:bg-green-900/20 cursor-not-allowed opacity-60" 
                    : "border-green-500 text-green-600 hover:bg-green-50 dark:hover:bg-green-900/20 hover:text-green-700 dark:hover:text-green-400"
                }`}
                onClick={() => {
                  if (!isSold) {
                    onMarkAsSold(listing.id);
                  }
                }}
                disabled={isSold}
              >
                <CheckCircle className={`h-3 w-3 mr-1 ${isSold ? "fill-green-600" : ""}`} />
                {isSold ? "–ü—Ä–æ–¥–∞–Ω–æ" : "–ü—Ä–æ–¥–∞–Ω–æ"}
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                className="text-xs h-7 px-2 border-red-500 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 hover:text-red-700 dark:hover:text-red-400"
                onClick={() => {
                  // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                  console.log("–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:", listing.id);
                }}
              >
                <XCircle className="h-3 w-3 mr-1" />
                –£–¥–∞–ª–∏—Ç—å
              </Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
} 